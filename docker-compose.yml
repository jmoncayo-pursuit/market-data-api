version: '3.8'

services:
  api:
    build: .
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@db:5432/market_data}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS:-kafka:9092}
      - API_KEY=${API_KEY:-your-api-key-here}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CACHE_TTL=${CACHE_TTL:-300}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60}
      - DEFAULT_PROVIDER=${DEFAULT_PROVIDER:-alpha_vantage}
      - POLLING_INTERVAL=${POLLING_INTERVAL:-60}
      - MOVING_AVERAGE_WINDOW=${MOVING_AVERAGE_WINDOW:-5}
      - PROMETHEUS_ENABLED=${PROMETHEUS_ENABLED:-true}
      - GRAFANA_ENABLED=${GRAFANA_ENABLED:-true}
    depends_on:
      - db
      - redis
      - kafka
    volumes:
      - .:/app
    networks:
      - market_data_network
    restart: unless-stopped

  db:
    image: postgres:${POSTGRES_VERSION:-15}-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-market_data}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - market_data_network
    restart: unless-stopped

  redis:
    image: redis:${REDIS_VERSION:-7}-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - market_data_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION:-7.4.0}
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    networks:
      - market_data_network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:${KAFKA_VERSION:-7.4.0}
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - market_data_network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-v2.45.0}
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - market_data_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-10.0.0}
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana_dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json
    depends_on:
      - prometheus
    networks:
      - market_data_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  prometheus_data:

networks:
  market_data_network:
    driver: bridge
